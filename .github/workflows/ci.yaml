name: CI
on:
  pull_request:
  push:
    branches:
      - main

env:
  RUST_TOOLCHAIN: 1.70.0
  TOOLCHAIN_PROFILE: minimal

jobs:
  formatting:
    name: Check Style
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: ${{ env.TOOLCHAIN_PROFILE }}
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true
          components: rustfmt
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      # These are custom lints which ensure various aspects of the codebase are consistent.
      - name: Ensure version in install docs is the same as main.
        run: |
          cargo_version=$(awk -F ' *= *' '/name = "better-builder"/ {getline; print $2}' Cargo.toml | tr -d '"')
          readme_version=$(awk '/```toml/{flag=1; next} /```/{flag=0} flag && /better_builder/ {print $3}' README.md | tr -d '"')
          if [ "$cargo_version" != "$readme_version" ]; then
            echo "Version mismatch: Cargo.toml ($cargo_version) != README.md ($readme_version)"
            exit 1
          else
            echo "Versions match: $cargo_version"
          fi
      - name: Check MSRV matches in readme and tests.
        run: |
          # Extract the MSRV from README.md
          readme_msrv=$(grep -oP '\(MSRV\) is `\K([0-9]+\.[0-9]+\.[0-9]+)' README.md)

          # Extract the MSRV from .github/workflows/test.yaml
          test_msrv=$(grep -oP 'RUST_VERSION: \K([0-9]+\.[0-9]+\.[0-9]+)' .github/workflows/test.yaml)

          # Extract the MSRV from .github/workflows/ci.yaml
          ci_msrv=$(grep -oP 'RUST_VERSION: \K([0-9]+\.[0-9]+\.[0-9]+)' .github/workflows/ci.yaml)

          # Extract the MSRV from rust-toolchain
          toolchain_msrv=$(cat rust-toolchain)

          # Compare versions
          if [ "$readme_msrv" != "$test_msrv" ]; then
            echo "MSRV mismatch: README.md ($readme_msrv) != .github/workflows/test.yaml ($test_msrv)"
            exit 1
          else
            echo "MSRV matches: $readme_msrv"
          fi

          if [ "$readme_msrv" != "$toolchain_msrv" ]; then
            echo "MSRV mismatch: README.md ($readme_msrv) != rust-toolchain ($toolchain_msrv)"
            exit 1
          else
            echo "MSRV matches: $readme_msrv"
          fi

          if [ "$readme_msrv" != "$ci_msrv" ]; then
            echo "MSRV mismatch: README.md ($readme_msrv) != .github/workflows/ci.yaml ($ci_msrv)"
            exit 1
          else
            echo "MSRV matches: $readme_msrv"
          fi

  clippy:
    name: Run Clippy
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: ${{ env.TOOLCHAIN_PROFILE }}
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true
          components: clippy
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: |
            --all-features -- -D warnings -W clippy::pedantic -W clippy::nursery -W rust-2018-idioms

  # TODO: Can't easily semver check a proc macro library. We will need to create a set of examples
  # Using the macro, then diff them for the purposes of generating a semver check.
  # These examples could easily overlap with the tests, so we could just use the tests as examples.

  # semver:
  #   name: Check Semver
  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: read

  #   steps:
  #     - name: Checkout the code
  #       uses: actions/checkout@v4
  #     - name: Check semver
  #       uses: obi1kenobi/cargo-semver-checks-action@v2
